@model KeyPair
@{
    ViewData["Title"] = "Double Encryption (AES/RSA) Example WebApp";
}

<div class="text-center">
    <h1 class="display-4">@ViewBag.Title</h1>
    <p>Esempio di cose che fanno cose</p>
</div>
<input type="hidden" id="rsaPublicKey" value="@Model.publicKey" />
<input type="file" id="fileUpload" />
<br />
<br />
<input type="button" id="fileDownload" value="download" />

<!------------------------------------------------------------------------------------->
<!----------------------------- Da spostare in Bundle --------------------------------->
<!------------------------------------------------------------------------------------->
<script src="rsa/jquery.min.js"></script>
<script src="rsa/jsencrypt.min.js"></script>
<script type="text/javascript">

    /* INIT */
    $(function () {
        //let srv = window.crypto.subtle;

        window.rsaGs = "|";
        window.rsaKeySize = 2048;
        window.rsaPublicKeyString = $("#rsaPublicKey").val();
        window.rsa = new JSEncrypt({ default_key_size: rsaKeySize });
        rsa.setPublicKey(rsaPublicKeyString);

        document.getElementById("fileUpload").addEventListener("change", handleUpload, false);
        document.getElementById("fileDownload").addEventListener("click", handleDownload, false);

    });

    /* HELPER */
    //ToDev: mettere i try/catch in tutti gli helper. Riutilizzare il codice. Elimina le funzioni lente e duplicate (es. Little). Funzioni aes/rsa (es. aesinit, window.punto)
    function benchmark(what) {
        var start = window.performance.now();
        what();
        var end = window.performance.now();
        console.log("Tempo chiave: ", (end - start) / 1000);
    }
        
    function WebBaseToBase(data) {
        return data.replace("-", "+").replace("_", "/");
    }
    function BaseToWebBase(data) {
        return data.replace("+", "-").replace("/", "_");
    }

    function ArrayBufferToBaseLittle(data) {
        return btoa(String.fromCharCode(...new Uint8Array(data)));
    }

    function Uint8ArrayToBase(data) {
        return btoa(String.fromCharCode.apply(null, data));
    }

    function BaseToUint8ArrayLittle(data) { //Vale solo per stringhe o piccoli binary altrimenti memory overflow
        return new Uint8Array(atob(data).split("").map(function(c) { return c.charCodeAt(0); }));
    }
    
    function BaseToUint8Array(data) {
        let dataLength = data.length;
        let dataBytes = new Uint8Array(new ArrayBuffer(dataLength));

        for (i = 0; i < dataLength; i++) {
            dataBytes[i] = data.charCodeAt(i);
        }

        return dataBytes;
    }

    function ArrayBufferToBase(data) { //data = ArrayBuffer di un base64
        let dataByteArray = new Uint8Array(data); //ByteArray del base64
        let dataString = new TextDecoder("utf-8").decode(dataByteArray); //Stringa base64
        //let dataString = String.fromCharCode.apply(null, dataByteArray); //Stringa base64
        return dataString;
    }

    function arrayBufferToBase64(buffer) {
        let binary = '';
        let bytes = new Uint8Array(buffer);
        let len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }

    function BaseToBlob(data, fileType) {
        let byteCharacters = atob(data); //stringa, rappresenta i byte del blob

        let byteArray = new Uint8Array(new ArrayBuffer(byteCharacters.length)); //creo un array di byte
        for (i = 0; i < byteCharacters.length; i++) {
            byteArray[i] = byteCharacters.charCodeAt(i); //pusho il byte di ogni carattere nell'array
        }

        var blob = new Blob([byteArray], { type: fileType })

        return blob;
    }

    function TriggerBlobDownload(blob, filename) {
        var link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = filename;
        link.click();
        //ToDev: elimina il link
    }

    /* APP */
    async function callApi(action, data, key, vector, message = null) {
        let params = {
            Key: key,
            Vector: vector,
            File: data,
            Message: message
        };

        return $.post({
            url: "/home/" + action + "/",
            contentType: "application/json; charset=utf-8", //invio
            dataType: "text", //ricevo
            data: JSON.stringify(params)
        });
    }

    async function handleDownload(e, filename = "1790kb.pdf", fileType = null) {
        //AES INIT
        let key = await aesGenerateKey();
        let keydata = await aesExportKey(key);
        let keyB64 = ArrayBufferToBaseLittle(keydata);
        let vector = window.crypto.getRandomValues(new Uint8Array(16));
        let vectorB64 = Uint8ArrayToBase(vector); 

        //RSA ENCRYPT
        let encryptedVector = rsaEncrypt(vectorB64, rsa, rsaKeySize, rsaGs);
        let encryptedKey = rsaEncrypt(keyB64, rsa, rsaKeySize, rsaGs);

        //API REQUEST
        let responseB64 = atob(await callApi("download", filename, encryptedKey, encryptedVector)); //response base64
        let responseByte = BaseToUint8Array(responseB64); //array di byte crittografati

        //AES DECRYPT
        let plainResponseByteB64 = await aesDecrypt(responseByte.buffer, key, vector); //ArrayBuffer del base64 in chiaro

        //CREO BLOB
        let plainResponseB64String = ArrayBufferToBase(plainResponseByteB64);
        let blob = BaseToBlob(plainResponseB64String, fileType);
        TriggerBlobDownload(blob, filename);
    }

    async function handleUpload() {        
        const myFile = this.files[0];
        if (myFile) {
            var reader = new FileReader();
            reader.readAsDataURL(myFile);
            reader.onload = async function (e) {

                //AES INIT
                let key = await aesGenerateKey();
                let keydata = await aesExportKey(key);
                let keyB64 = btoa(String.fromCharCode(...new Uint8Array(keydata)));
                let vector = window.crypto.getRandomValues(new Uint8Array(16));
                let vectorB64 = btoa(String.fromCharCode.apply(null, vector));
                
                //RSA ENCRYPTION
                let encryptedVector = rsaEncrypt(vectorB64, rsa, rsaKeySize, rsaGs);
                let encryptedKey = rsaEncrypt(keyB64, rsa, rsaKeySize, rsaGs);

                //RECUPERO FILE
                let base64blob = e.target.result;
                base64blob = base64blob.split(",")[1]; //base64 del blob
                let uploadByte = BaseToUint8Array(base64blob);

                //AES ENCRYPTION
                let encryptedData = await aesEncrypt(uploadByte.buffer, key, vector); //ArrayBuffer della stringa cifrata

                //API CALL
                let dati = arrayBufferToBase64(encryptedData); //Stringa base64 dei byte cifrati
                let uploadResponse = await callApi("upload", dati, encryptedKey, encryptedVector, myFile.name);
            };
        }

    }

    /* AES */
    async function aesGenerateKey(keyLength = 256, algorithm = "AES-CBC") {
        return window.crypto.subtle.generateKey({ name: algorithm, length: keyLength }, true, ["encrypt", "decrypt"]);
    }

    async function aesExportKey(key, format = "raw") { //jwk o raw
        return window.crypto.subtle.exportKey(format, key);
    }

    async function aesDecrypt(data, key, vector) {
        return window.crypto.subtle.decrypt(
            {
                name: "AES-CBC",
                iv: vector, //The initialization vector you used to encrypt
                length: 256
            },
            key, //from generateKey or importKey above
            data //ArrayBuffer of the data
        );
    }

    async function aesEncrypt(data, key, vector) {
        return window.crypto.subtle.encrypt(
            {
                name: "AES-CBC",
                //Don't re-use initialization vectors!
                //Always generate a new iv every time your encrypt!
                iv: vector,
                length: 256
            },
            key, //from generateKey or importKey above
            data //ArrayBuffer of data you want to encrypt
        );
    }

    /* RSA */
    function rsaEncrypt(message, srv, keySize, chunkSeparator) {
        let chunkSize = (keySize / 8) - 11; //8bit, 11overhead

        if (message == null || message.length < 1)
            throw new ArgumentException("String can not be null or empty and chunk size should be greater than zero.");

        var chunkCount = message.length / chunkSize + (message.length % chunkSize != 0 ? 1 : 0);
        var result = [];

        for (var i = 0; i < chunkCount; i++) {
            var startIndex = i * chunkSize;
            var s = "";

            if (startIndex + chunkSize >= message.length) {
                s = message.substring(startIndex);
            } else {
                s = message.substring(startIndex, startIndex + chunkSize);
            }

            var r = srv.encrypt(s);
            result.push(r);
        }

        return result.join(chunkSeparator) + chunkSeparator;
    }

</script>