@model RSAKeyPair
@{
    ViewData["Title"] = "Double Encryption (AES/RSA) Example WebApp";
}

<div class="text-center">
    <h1 class="display-4">@ViewBag.Title</h1>
    <p>Esempio di cose che fanno cose</p>
</div>

<label for="cliprivkey">Private Key del client:</label>
<br />
<textarea id="cliprivkey" rows="3" cols="100">ancora non generata</textarea>
<br />
<label for="clipubkey">Public Key del client:</label>
<br />
<textarea id="clipubkey" rows="3" cols="100">ancora non generata</textarea>
<br />
<br />
<label for="srvprivkey">Private Key del server: (ricevuta al mount, normalmente la tiene in canna il server)</label>
<br />
<textarea id="srvprivkey" rows="3" cols="100">@Model.privateKey</textarea>
<br />
<label for="srvpubkey">Public Key del server: (ricevuta al mount)</label>
<br />
<textarea id="srvpubkey" rows="3" cols="100">@Model.publicKey</textarea>
<br />
<label for="input">Text to encrypt/decrypt:</label>
<br />
<textarea id="input" name="input" type="text" rows=3 cols=100 placeholder="text to encrypt/decrypt">Messaggio di esempio</textarea>
<br />
<br />
&nbsp;
<input id="download" type="button" value="download test" />
&nbsp;
<input id="upload" type="button" value="upload test" />
<br />
<br />
<label for="result">Result:</label>
<br />
<textarea id="result" name="result" type="text" rows=3 cols=100 placeholder="Result"></textarea>
<br />
<input type="file" id="fileUpload">

<!------------------------------------------------------------------------------------->
<!---------------------------- Bundlee da spostare ------------------------------------>
<!------------------------------------------------------------------------------------->
<script src="rsa/jquery.min.js"></script>
<script src="rsa/jsencrypt.min.js"></script>
<script type="text/javascript">
    $(function () {

        const inputElement = document.getElementById("fileUpload");
        inputElement.addEventListener("change", handleFiles, false);

        function handleFiles() {
            const myFile = this.files[0];

            if (myFile) {
                var reader = new FileReader();
                reader.readAsDataURL(myFile);
                reader.onload = function(e) {
                    var base64blob = e.target.result;
                    base64blob = base64blob.split(",")[1];
                    console.log("blob --> ", base64blob);

                    
                    var srvPubKey = $("#srvpubkey").val();
                    var srvPrivKey = $("#srvprivkey").val();

                    var encoded = encodeMessage(base64blob, 245, "|", srvPubKey);
                    console.log("encoded ==> ", encoded);

                    var params = {
                        key: srvPrivKey,
                        message: encoded
                    };

                    $.post({
                        url: "/home/upload/",
                        contentType: "application/json; charset=utf-8", //invio
                        dataType: "text", //ricevo
                        data: JSON.stringify(params),
                        success: function (data) {
                            $('#input').val(data);
                            console.log("Server answer: ", data);
                        },
                        failure: function (errMsg) {
                            console.log("Err: ", errMsg);
                        }
                    });

                };
            }
                        
        }

        function decodeMessage(message, chunkSeparator, privateKey) {
            var srv = new JSEncrypt({ default_key_size: 2048 });
            srv.setPrivateKey(privateKey);

            var chunks = message.split(chunkSeparator);
            var chunkCount = chunks.length;
            var result = [];

            if (message == null || message.length < 1)
                throw new ArgumentException("String can not be null or empty and chunk size should be greater than zero.");

            for (var i = 0; i < chunkCount; i++) {
                var r = srv.decrypt(chunks[i]);
                result.push(r);
            }

            return result.join("");
        }

        function encodeMessage(message, chunkSize, chunkSeparator, publicKey) {
            var srv = new JSEncrypt({ default_key_size: 2048 });
            srv.setPublicKey(publicKey);

            //key 2048b => chunk 1960b = 245B
            if (message == null || message.length < 1)
                throw new ArgumentException("String can not be null or empty and chunk size should be greater than zero.");

            var chunkCount = message.length / chunkSize + (message.length % chunkSize != 0 ? 1 : 0);
            var result = [];

            for (var i = 0; i < chunkCount; i++) {
                var startIndex = i * chunkSize;
                var s = "";

                if (startIndex + chunkSize >= message.length) {
                    s = message.substring(startIndex);
                } else {
                    s = message.substring(startIndex, startIndex + chunkSize);
                }

                var r = srv.encrypt(s);
                result.push(r);
            }

            return result.join(chunkSeparator) + chunkSeparator;
        }

        $("#download").click(function () {

            var srv = new JSEncrypt({ default_key_size: 2048 });
            var privKey = srv.getPrivateKey();
            var pubKey = srv.getPublicKey();
            $("#cliprivkey").val(privKey);
            $("#clipubkey").val(pubKey);

            var params = {
                key: pubKey,
                message: $("#input").val()
            };

            $.post({
                url: "/home/download/",
                contentType: "application/json; charset=utf-8", //invio
                dataType: "text", //ricevo
                data: JSON.stringify(params),
                success: function (data) {
                    $('#input').val(data);
                    console.log("Received: ", data);

                    var decoded = decodeMessage(data, "|", privKey);
                    console.log("decoded ==> ", decoded);
                },
                failure: function (errMsg) {
                    console.log("Err: ", errMsg);
                }
            });

        });

        $("#upload").click(function () {

            var srvPubKey = $("#srvpubkey").val();
            var srvPrivKey = $("#srvprivkey").val();
            var message = $("#input").val();

            var encoded = encodeMessage(message, 245, "|", srvPubKey);
            console.log("encoded ==> ", encoded);

            var params = {
                key: srvPrivKey,
                message: encoded
            };

            $.post({
                url: "/home/upload/",
                contentType: "application/json; charset=utf-8", //invio
                dataType: "text", //ricevo
                data: JSON.stringify(params),
                success: function (data) {
                    $('#input').val(data);
                    console.log("Server answer: ", data);
                },
                failure: function (errMsg) {
                    console.log("Err: ", errMsg);
                }
            });

        });


    });
</script>